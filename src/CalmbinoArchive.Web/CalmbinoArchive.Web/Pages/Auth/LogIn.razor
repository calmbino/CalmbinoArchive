@using CalmbinoArchive.Application.DTOs
@using CalmbinoArchive.Application.DTOs.Validators
@using CalmbinoArchive.Web.Shared.Contracts
@using CalmbinoArchive.Web.Shared.Services
@using Microsoft.AspNetCore.Identity
@using Microsoft.Extensions.Options
@using Solutaris.InfoWARE.ProtectedBrowserStorage.Services
@using Serilog
@page "/LogIn/server"
@rendermode InteractiveServer
@inject AuthClientService AuthClientService
@inject IIWLocalStorageService LocalStorage

<MudSnackbarProvider/>
<div style="display: flex; justify-content: center; align-items: center; height: 80vh">
    <MudCard Class="pa-5" Style="width: 40%">
        <MudCardContent Style="margin-bottom: 40px">
            <MudForm Spacing="8" Model="@_model" @ref="@_form" Validation="@(_validator.ValidateValue)"
                     ValidationDelay="0">
                <MudTextField @bind-Value="_model.Email" For="@(() => _model.Email)" Immediate="true" Label="Email"/>
                <MudTextField @bind-Value="_model.Password" For="@(() => _model.Password)" Immediate="true"
                              Label="Password" InputType="InputType.Password"/>
            </MudForm>
        </MudCardContent>
        <MudCardActions>
            <MudButton FullWidth="true" Variant="Variant.Filled" Color="Color.Primary"
                       OnClick="@(async () => await Submit())">Log in
            </MudButton>
        </MudCardActions>
    </MudCard>
</div>

@code {
    [Inject] ISnackbar? Snackbar { get; set; }
    [Inject] IOptions<IdentityOptions>? PasswordOptions { get; set; }

    private MudForm? _form;
    private readonly LoginRequestDto _model = new LoginRequestDto();
    private LoginRequestDtoValidator _validator = null!;

    private async Task Submit()
    {
        await _form!.Validate();

        Log.Information("_form Model >>> {@Model}", _form.Model);
        Log.Information("_form Errors >>> {@Errors}", _form.Errors);


        if (_form.IsValid)
        {
            Log.Information("LoginRequestDto >>> {@LoginRequestDto}", _model);
            var response = await AuthClientService.LoginAsync(_model);
            Log.Information("Response >>> {@response}", response);
            Log.Information("Response Headers >>> {@headers}", response.Headers);
            if (response.IsSuccessStatusCode)
            {
                var cookies = response.Headers.GetValues("Set-Cookie");

                var body = await response.Content.ReadFromJsonAsync<LoginResponseDto>();
                Log.Information("Response Body >>> {@body}", body);
                Log.Information("Response cookies >>> {@cookies}", cookies);

                await LocalStorage.SetItemAsync("AccessToken", body.AccessToken);
            }
            else
            {
                var body = await response.Content.ReadFromJsonAsync<ProblemDetails>();
                Log.Information("Response Body >>> {@body}", body);
            }
        }
    }

    protected override void OnInitialized()
    {
        // Log.Information("PasswordOptions >>>> {@PasswordOptions}", PasswordOptions);
        _validator = new LoginRequestDtoValidator(PasswordOptions!);
    }

}