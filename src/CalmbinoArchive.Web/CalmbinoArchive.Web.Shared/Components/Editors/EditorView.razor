@using Microsoft.JSInterop

@implements IAsyncDisposable

<div>
    <MudPaper Elevation="5" Square="true" Class="pa-3">
        @((MarkupString)Markdown.ToHtml(MarkdownValue, new MarkdownPipelineBuilder().UseSoftlineBreakAsHardlineBreak()
                                                                                    .UseEmojiAndSmiley()
                                                                                    .UseSmartyPants()
                                                                                    .UseAdvancedExtensions()
                                                                                    .Build()))
    </MudPaper>
</div>

@code {
    [Parameter] public string MarkdownValue { get; set; } = string.Empty;

    private readonly Lazy<Task<IJSObjectReference>> _moduleTask;

    public EditorView(IJSRuntime jsRuntime)
    {
        Console.WriteLine("View 초기화!!!");
        _moduleTask = new(() => jsRuntime.InvokeAsync<IJSObjectReference>(
                                             "import", "./_content/CalmbinoArchive.Web.Shared/js/editorView.js")
                                         .AsTask());
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        Console.WriteLine("렌더링!!!!");
        await CallHljs();
    }

    private async ValueTask CallHljs()
    {
        var module = await _moduleTask.Value;
        await module.InvokeVoidAsync("callHljs");
        await module.InvokeVoidAsync("changeLinkTarget");
        await module.InvokeVoidAsync("addCopyFuncInCodeBlock");
    }

    public async ValueTask DisposeAsync()
    {
        if (_moduleTask.IsValueCreated)
        {
            var module = await _moduleTask.Value;
            await module.DisposeAsync();

            Console.WriteLine("hljs 모듈 해제");
        }
    }

}